import React, { useState } from "react";
import Swal from "sweetalert2";
import { useNavigate } from "react-router-dom";  // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏ô‡∏µ‡πâ
import "./register.css";

const Register: React.FC = () => {
  const navigate = useNavigate();  // <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô useNavigate

  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    gender: "",
    address: "",
    dob: "",
    phone: "",
    email: "",
    password: "",
    confirmPassword: "",
    consent: false,
  });

  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const target = e.target;
    const name = target.name;
    let value: string | boolean;

    if (
      target instanceof HTMLInputElement &&
      (target.type === "checkbox" || target.type === "radio")
    ) {
      value = target.checked;
    } else {
      value = target.value;
    }

    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    setErrors((prev) => {
      const copy = { ...prev };
      delete copy[name];
      return copy;
    });
  };

  const validate = () => {
    const newErrors: { [key: string]: string } = {};

    if (!formData.firstName.trim()) {
      newErrors.firstName = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠";
    } else if (!/^[‡∏Å-‡πôa-zA-Z\s]+$/.test(formData.firstName)) {
      newErrors.firstName = "‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô";
    }

    if (!formData.lastName.trim()) {
      newErrors.lastName = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•";
    } else if (!/^[‡∏Å-‡πôa-zA-Z\s]+$/.test(formData.lastName)) {
      newErrors.lastName = "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô";
    }

    if (!formData.gender) newErrors.gender = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®";
    if (!formData.address.trim()) newErrors.address = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà";
    if (!formData.dob) newErrors.dob = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î";

    if (!formData.phone.trim()) {
      newErrors.phone = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå";
    } else if (!/^0\d{9}$/.test(formData.phone)) {
      newErrors.phone = "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç 10 ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0)";
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email
    if (!formData.email.trim()) {
      newErrors.email = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•";
    } else if (!/^[\w.-]+@gmail\.com$/.test(formData.email)) {
      newErrors.email = "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö email ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    }
    if (!formData.password) newErrors.password = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô";
    if (formData.password !== formData.confirmPassword)
      newErrors.confirmPassword = "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô";
    if (!formData.consent)
      newErrors.consent = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß";

    return newErrors;
  };

 const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();

  const validationErrors = validate();
  setErrors(validationErrors);

  if (Object.keys(validationErrors).length === 0) {
    try {
      const response = await fetch("http://localhost:8080/patients/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
      }

      Swal.fire({
        title: "üéâ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        text: "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        icon: "success",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        timer: 3000,
        timerProgressBar: true,
        backdrop: true,
        showClass: {
          popup: "animate__animated animate__fadeInDown",
        },
        hideClass: {
          popup: "animate__animated animate__fadeOutUp",
        },
        customClass: {
          popup: "swal2-border-radius",
        },
      }).then((result) => {
        if (result.isConfirmed || result.isDismissed) {
          navigate("/cute"); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        }
      });

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      setFormData({
        firstName: "",
        lastName: "",
        gender: "",
        address: "",
        dob: "",
        phone: "",
        email: "",
        password: "",
        confirmPassword: "",
        consent: false,
      });

    } catch (error: any) {
      Swal.fire({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: error.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ",
        icon: "error",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
    }
  }
  };

  return (
    <div className="bmser-background">
    <form className="registermed" onSubmit={handleSubmit} noValidate>
      <h2>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</h2>

      <label>
        ‡∏ä‡∏∑‡πà‡∏≠
        <input
          type="text"
          name="firstName"
          value={formData.firstName}
          onChange={handleChange}
          
        />
        {errors.firstName && (
          <div className="error-message">{errors.firstName}</div>
        )}
      </label>

      <label>
        ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
        <input
          type="text"
          name="lastName"
          value={formData.lastName}
          onChange={handleChange}
         
        />
        {errors.lastName && (
          <div className="error-message">{errors.lastName}</div>
        )}
      </label>

      <label>
        ‡πÄ‡∏û‡∏®
        <select
          name="gender"
          value={formData.gender}
          onChange={handleChange}
          
        >
          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</option>
          <option value="male">‡∏ä‡∏≤‡∏¢</option>
          <option value="female">‡∏´‡∏ç‡∏¥‡∏á</option>
          <option value="other">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
        </select>
        {errors.gender && (
          <div className="error-message">{errors.gender}</div>
        )}
      </label>

      <label>
        ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
        <input
          type="text"
          name="address"
          value={formData.address}
          onChange={handleChange}
          
        />
        {errors.address && (
          <div className="error-message">{errors.address}</div>
        )}
      </label>

      <label>
        ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
        <input
          type="date"
          name="dob"
          value={formData.dob}
          onChange={handleChange}
       
        />
        {errors.dob && <div className="error-message">{errors.dob}</div>}
      </label>

      <label>
  ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
  <input
    type="tel"
    name="phone"
    value={formData.phone}
    maxLength={10}
    onChange={(e) => {
      const cleanedValue = e.target.value.replace(/[^0-9]/g, ""); // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
      setFormData((prev) => ({
        ...prev,
        phone: cleanedValue,
      }));

      // ‡∏•‡πâ‡∏≤‡∏á error ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      setErrors((prev) => {
        const copy = { ...prev };
        delete copy.phone;
        return copy;
      });
    }}
  />
  {errors.phone && <div className="error-message">{errors.phone}</div>}
</label>
    <label>
        ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
        />
        {errors.email && <div className="error-message">{errors.email}</div>}
      </label>

      <label>
        ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        <input
          type="password"
          name="password"
          value={formData.password}
          onChange={handleChange}
        
        />
        {errors.password && (
          <div className="error-message">{errors.password}</div>
        )}
      </label>

      <label>
        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        <input
          type="password"
          name="confirmPassword"
          value={formData.confirmPassword}
          onChange={handleChange}
       
        />
        {errors.confirmPassword && (
          <div className="error-message">{errors.confirmPassword}</div>
        )}
      </label>

 <label>
  <input
    type="checkbox"
    name="consent"
    checked={formData.consent}
    onChange={handleChange}
   
  />
  <span
    onClick={(e) => {
      e.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å link ‡∏ã‡πâ‡∏≠‡∏ô
      Swal.fire({
        title: "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°",
        html: `
          <ul style="text-align: left; padding-left: 1.2em;">
            <li>‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≥‡∏ö‡∏±‡∏î CBT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</li>
            <li>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö</li>
            <li>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡πÅ‡∏Å‡πà‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢</li>
            <li>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á</li>
            <li>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ô‡∏µ‡πâ</li>
            <li>
    ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà<br><br>
    <img src="https://cdn-icons-png.flaticon.com/128/126/126509.png" width="16" style="vertical-align: middle; margin-right: 6px;" />
    ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 094-564-3456<br><br>
    <img src="https://cdn-icons-png.flaticon.com/128/732/732200.png" width="16" style="vertical-align: middle; margin-right: 6px;" />
    ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: DepressionRec@gmail.com
  </li>
          </ul>
        `,
        imageUrl: "https://cdn-icons-png.flaticon.com/128/10348/10348976.png",
        imageWidth: 64,
        imageHeight: 64,
        imageAlt: "Privacy Policy Icon",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        customClass: {
          confirmButton: "health-btn-swal"
        },
        width: '600px',
        backdrop: true,
        showClass: {
          popup: "animate__animated animate__fadeInDown",
        },
        hideClass: {
          popup: "animate__animated animate__fadeOutUp",
        },
      });
    }}
    style={{ cursor: "pointer", color: "#007bff", marginLeft: "8px" }}
  >
    ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
  </span>
</label>


      {errors.consent && (
        <div className="error-message" style={{ marginTop: 4 }}>
          {errors.consent}
        </div>
      )}
    <p className="login-link">
  ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß? <a href="/login">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</a>
</p>

      <button type="submit">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</button>
    </form>
    </div>
  );
};

export default Register;
